#######################################################################################################################################
#                                        First steps to use Quant-Insight API with examples
#######################################################################################################################################
#
### Install packages. Note that to install packages on Jupyter Notebook you need to use !pip install instead of pip install

!pip install matplotlib pandas

!pip install \
--upgrade \
--extra-index-url=https://dl.cloudsmith.io/DLTOKEN/quant-insight/python/python/index/ \
qi-client

### Import packages and create 
from __future__ import print_function
import time
import qi_client
from qi_client.rest import ApiException
from pprint import pprint

# Configure API key authorization: Qi API Key
configuration = qi_client.Configuration()
configuration.api_key['X-API-KEY'] = 'ADD-YOUR-API-KEY-HERE'

# create an instance of the API class
api_instance = qi_client.DefaultApi(qi_client.ApiClient(configuration))

#######################################################################################################################################
#                                                        Functions definition
#######################################################################################################################################
#
#
#######################################################################################################################################
#                                                           Get all buckets
#######################################################################################################################################

def get_buckets_table():
    try:
        # Get bucket details
        buckets = api_instance.get_buckets()
    
        buckets_ids = [x.id for x in buckets]
        buckets_names = [x.name for x in buckets]
    
        buckets_grid = pandas.DataFrame(np.array(buckets_ids), np.array(buckets_names))
    
        buckets_grid.columns = ['Bucket id']
    
        #pprint(buckets_grid)
        return buckets_grid
    
    except ApiException as e:
        print("Exception when calling DefaultApi->get_bucket: %s\n" % e)
    

#######################################################################################################################################
#                                                                Get bucket drivers
#######################################################################################################################################
    
def get_bucket_drivers_table(bucket):

    try:
        # Get drivers for a given bucket
        bucket_drivers = api_instance.get_bucket_drivers(bucket)
    
        bucket_id = [x.id for x in bucket_drivers]
    
        bucket_inst1_ticker = [x.instrument1.ticker for x in bucket_drivers]
        bucket_inst1_mnemonic = [x.instrument1.mnemonic for x in bucket_drivers]
        bucket_inst1_id = [x.instrument1.id for x in bucket_drivers]
    
  #  bucket_inst2_ticker = [x.instrument2.ticker for x in bucket_drivers]
  #  bucket_inst2_mnemonic = [x.instrument2.mnemonic for x in bucket_drivers]
  #  bucket_inst2_id = [x.instrument2.id for x in bucket_drivers]
    
  #  bucket_inst3_ticker = [x.instrument3.ticker for x in bucket_drivers]
  #  bucket_inst3_mnemonic = [x.instrument3.mnemonic for x in bucket_drivers]
  #  bucket_inst3_id = [x.instrument3.id for x in bucket_drivers]
    
  #  bucket_inst4_ticker = [x.instrument4.ticker for x in bucket_drivers]
  #  bucket_inst4_mnemonic = [x.instrument4.mnemonic for x in bucket_drivers]
  #  bucket_inst4_id = [x.instrument4.id for x in bucket_drivers]
    
        driver_names = [x.name for x in bucket_drivers]
        driver_shortnames = [x.short_name for x in bucket_drivers]
    
        drivers_grid = pandas.DataFrame(np.array(bucket_id), np.array(driver_shortnames))
        drivers_grid.columns = ['Drivers Id']
        drivers_grid['Instrument 1 Ticker'] = np.array(bucket_inst1_ticker)
        drivers_grid['Instrument 1 Mnemonic'] = np.array(bucket_inst1_mnemonic)
        drivers_grid['Instrument 1 Id'] = np.array(bucket_inst1_id)
    
        return(drivers_grid)
    
    except ApiException as e:
        print("Exception when calling DefaultApi->get_bucket_drivers: %s\n" % e)

#######################################################################################################################################
#                                                            Get driver details
#######################################################################################################################################
   
driver = 'Euro GDP'
try:
# Get driver details
    api_response = api_instance.get_driver(driver)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DefaultApi->get_driver: %s\n" % e)
    
    
#######################################################################################################################################
#                                                              Main code
#######################################################################################################################################

# The first step in this example is to print all the buckets we have in our database.

get_buckets_table()

# To get all the drivers associated to a specific bucket. For this example, we will continue using the bucket 'Global Growth', but any 
# other bucket from the previous list can be used instead. 

get_bucket_drivers_table('Global Growth')

# To get the details of a specific driver, we can use this function. For this example

